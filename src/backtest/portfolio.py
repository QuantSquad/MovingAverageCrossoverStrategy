"""
This module contains the class definition for the Portfolio class, which serves as an abstract
base class representing a portfolio of financial positions, including both instruments and cash. 
It is designed to interact with a set of trading signals provided by a Strategy, thereby forming 
a core component of a trading system.

The Portfolio class outlines the structure for managing and backtesting portfolios based on
different trading strategies. Each derived portfolio class is expected to implement its own 
methods for generating positions and conducting backtesting, tailored to the specific mechanics 
of the strategy.

Currently, this framework is designed to support portfolio management and backtesting for 
strategies involving single or multiple financial instruments.
"""

from abc import ABCMeta, abstractmethod
import pandas as pd


class Portfolio(metaclass=ABCMeta):
    """
    The Portfolio class is an abstract base class representing a portfolio of positions, 
    which includes both financial instruments and cash. The portfolio is determined 
    based on a set of signals generated by a Strategy.

    This class provides an interface for defining the allocation of portfolio positions 
    and the logic for backtesting the portfolio based on the given trading strategy.

    Derived classes are expected to implement methods for position generation and backtesting, 
    tailoring them to specific portfolio strategies.

    Methods:
        generate_positions: Determines the allocation of portfolio positions.
        backtest_portfolio: Executes the portfolio backtest, producing an equity curve and
                            performance metrics.
    """

    @abstractmethod
    def generate_positions(self) -> pd.DataFrame:
        """
        Determines the allocation of portfolio positions based on forecasting
        signals and available cash.

        This method should be implemented in derived classes to define
        specific logic for position allocation.

        Returns:
            pandas.DataFrame: A DataFrame representing the positions in the portfolio over time.
        Raises:
            NotImplementedError: If the method is not implemented in the derived class.
        """
        raise NotImplementedError("Should implement generate_positions()!")

    @abstractmethod
    def backtest_strategy(self) -> pd.DataFrame:
        """
        Executes the backtesting of the portfolio based on the defined trading strategy.

        This method should calculate and return the equity curve (growth of total equity) as a sum
        of holdings and cash, along with the returns associated with this curve, based on the
        'positions' DataFrame.

        The implementation should produce a portfolio object for analysis and review.

        Returns:
            pandas.DataFrame: A DataFrame containing the backtest results, including equity curve
                              and period returns.
        Raises:
            NotImplementedError: If the method is not implemented in the derived class.
        """
        raise NotImplementedError("Portfolio child class must implement backtest_strategy()")
